use std::collections::HashMap;

struct ConversionTables {
    ascii_zenkaku_chars: Vec<char>,
    ascii_hankaku_chars: Vec<char>,
    kana_zenkaku_chars: Vec<char>,
    kana_hankaku_chars: Vec<char>,
    digit_zenkaku_chars: Vec<char>,
    digit_hankaku_chars: Vec<char>,
    kana_ten_map: HashMap<char, char>,
    kana_maru_map: HashMap<char, char>,
}

impl ConversionTables {
    fn new() -> Self {
        ConversionTables {
            ascii_zenkaku_chars: vec![
                'ａ', 'ｂ', 'ｃ', 'ｄ', 'ｅ', 'ｆ', 'ｇ', 'ｈ', 'ｉ', 'ｊ', 'ｋ', 'ｌ', 'ｍ', 'ｎ', 'ｏ', 'ｐ', 'ｑ', 'ｒ', 'ｓ', 'ｔ', 'ｕ', 'ｖ', 'ｗ', 'ｘ', 'ｙ', 'ｚ',
                'Ａ', 'Ｂ', 'Ｃ', 'Ｄ', 'Ｅ', 'Ｆ', 'Ｇ', 'Ｈ', 'Ｉ', 'Ｊ', 'Ｋ', 'Ｌ', 'Ｍ', 'Ｎ', 'Ｏ', 'Ｐ', 'Ｑ', 'Ｒ', 'Ｓ', 'Ｔ', 'Ｕ', 'Ｖ', 'Ｗ', 'Ｘ', 'Ｙ', 'Ｚ',
                '！', '”', '＃', '＄', '％', '＆', '’', '（', '）', '＊', '＋', '，', '－', '．', '／', '：', '；', '＜', '＝', '＞', '？', '＠', '［', '￥', '］', '＾', '＿', '‘', '｛', '｜', '｝', '～', '　', '＼',
            ],
            ascii_hankaku_chars: vec![
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'Ｒ', 'Ｓ', 'Ｔ', 'Ｕ', 'Ｖ', 'Ｗ', 'Ｘ', 'Ｙ', 'Ｚ',
                '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '¥', ']', '^', '_', '`', '{', '|', '}', '~', ' ', '\\',
            ],
            kana_zenkaku_chars: vec![
                'ア', 'イ', 'ウ', 'エ', 'オ', 'カ', 'キ', 'ク', 'ケ', 'コ', 'サ', 'シ', 'ス', 'セ', 'ソ', 'タ', 'チ', 'ツ', 'テ', 'ト', 'ナ', 'ニ', 'ヌ', 'ネ', 'ノ', 'ハ', 'ヒ', 'フ', 'ヘ', 'ホ', 'マ', 'ミ', 'ム', 'メ', 'モ', 'ヤ', 'ユ', 'ヨ', 'ラ', 'リ', 'ル', 'レ', 'ロ', 'ワ', 'ヲ', 'ン', 'ァ', 'ィ', 'ゥ', 'ェ', 'ォ', 'ッ', 'ャ', 'ュ', 'ョ', '。', '、', '・', '゛', '゜', '「', '」', 'ー',
            ],
            kana_hankaku_chars: vec![
                'ｱ', 'ｲ', 'ｳ', 'ｴ', 'ｵ', 'ｶ', 'ｷ', 'ｸ', 'ｹ', 'ｺ', 'ｻ', 'ｼ', 'ｽ', 'ｾ', 'ｿ', 'ﾀ', 'ﾁ', 'ﾂ', 'ﾃ', 'ﾄ', 'ﾅ', 'ﾆ', 'ﾇ', 'ﾈ', 'ﾉ', 'ﾊ', 'ﾋ', 'ﾌ', 'ﾍ', 'ﾎ', 'ﾏ', 'ﾐ', 'ﾑ', 'ﾒ', 'ﾓ', 'ﾔ', 'ﾕ', 'ﾖ', 'ﾗ', 'ﾘ', 'ﾙ', 'ﾚ', 'ﾛ', 'ﾜ', 'ｦ', 'ﾝ', 'ｧ', 'ｨ', 'ｩ', 'ｪ', 'ｫ', 'ｯ', 'ｬ', 'ｭ', 'ｮ', '｡', '､', '･', 'ﾞ', 'ﾟ', '｢', '｣', 'ｰ',
            ],
            digit_zenkaku_chars: vec!['０', '１', '２', '３', '４', '５', '６', '７', '８', '９'],
            digit_hankaku_chars: vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            kana_ten_map: [
                ('ガ', 'ｶ'), ('ギ', 'ｷ'), ('グ', 'ｸ'), ('ゲ', 'ｹ'), ('ゴ', 'ｺ'), ('ザ', 'ｻ'), ('ジ', 'ｼ'), ('ズ', 'ｽ'), ('ゼ', 'ｾ'), ('ゾ', 'ｿ'), ('ダ', 'ﾀ'), ('ヂ', 'ﾁ'), ('ヅ', 'ﾂ'), ('デ', 'ﾃ'), ('ド', 'ﾄ'), ('バ', 'ﾊ'), ('ビ', 'ﾋ'), ('ブ', 'ﾌ'), ('ベ', 'ﾍ'), ('ボ', 'ﾎ'), ('ヴ', 'ｳ'),
            ].iter().cloned().collect(),
            kana_maru_map: [
                ('パ', 'ﾊ'), ('ピ', 'ﾋ'), ('プ', 'ﾌ'), ('ペ', 'ﾍ'), ('ポ', 'ﾎ'),
            ].iter().cloned().collect(),
        }
    }
}